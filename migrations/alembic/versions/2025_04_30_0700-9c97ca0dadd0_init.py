"""init

Revision ID: 9c97ca0dadd0
Revises: 
Create Date: 2025-04-30 07:00:14.353354

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9c97ca0dadd0'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('models',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'user_id', name='uix_model_name_user_id')
    )
    op.create_table('functions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('ret_type', sa.String(), nullable=False),
    sa.Column('body', sa.Text(), nullable=False),
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'model_id', name='uix_function_name_model_id')
    )
    op.create_table('imports',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('version', sa.String(), nullable=True),
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'model_id', name='uix_import_name_model_id')
    )
    op.create_table('nodes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('object_table', sa.String(), nullable=False),
    sa.Column('object_name', sa.String(), nullable=False),
    sa.Column('object_id', sa.Integer(), nullable=False),
    sa.Column('node_type', sa.Enum('RESOURCE', 'RESOURCE_TYPE', 'FUNCTION', 'RULE_TEMPLATE', 'RULE_USAGE', 'OPERATION_TEMPLATE', 'OPERATION_USAGE', 'IRREGULAR_TEMPLATE', 'IRREGULAR_USAGE', name='nodetype'), nullable=False),
    sa.Column('pos_x', sa.Integer(), nullable=False),
    sa.Column('pos_y', sa.Integer(), nullable=False),
    sa.Column('width', sa.Integer(), nullable=False),
    sa.Column('height', sa.Integer(), nullable=False),
    sa.Column('color', sa.String(), nullable=False),
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('resource_types',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('type', sa.Enum('CONSTANT', 'TEMPORAL', name='resourcetypetypeenum'), nullable=False),
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'model_id', name='uix_resource_type_name_model_id')
    )
    op.create_table('templates',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('type', sa.Enum('IRREGULAR_EVENT', 'OPERATION', 'RULE', name='templatetypeenum'), nullable=False),
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'model_id', name='uix_template_name_model_id')
    )
    op.create_table('edges',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('from_node', sa.Integer(), nullable=False),
    sa.Column('to_node', sa.Integer(), nullable=False),
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.CheckConstraint('from_node != to_node', name='check_from_node_to_node_diff'),
    sa.ForeignKeyConstraint(['from_node'], ['nodes.id'], ),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ),
    sa.ForeignKeyConstraint(['to_node'], ['nodes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('function_parameters',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('function_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['function_id'], ['functions.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'function_id', name='uix_function_parameter_function')
    )
    op.create_table('irregular_event_bodies',
    sa.Column('body', sa.Text(), nullable=False),
    sa.Column('template_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['template_id'], ['templates.id'], ),
    sa.PrimaryKeyConstraint('template_id')
    )
    op.create_table('irregular_event_generators',
    sa.Column('type', sa.Enum('NORMAL', 'PRECISE', 'UNIFORM', 'EXPONENTIAL', 'GAUSSIAN', 'POISSON', name='irregulareventgeneratortypeenum'), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('dispersion', sa.Float(), nullable=False),
    sa.Column('template_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['template_id'], ['templates.id'], ),
    sa.PrimaryKeyConstraint('template_id')
    )
    op.create_table('operation_bodies',
    sa.Column('condition', sa.Text(), nullable=False),
    sa.Column('body_before', sa.Text(), nullable=False),
    sa.Column('delay', sa.Integer(), nullable=False),
    sa.Column('body_after', sa.Text(), nullable=False),
    sa.Column('template_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['template_id'], ['templates.id'], ),
    sa.PrimaryKeyConstraint('template_id')
    )
    op.create_table('packages',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('alias', sa.String(), nullable=True),
    sa.Column('import_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['import_id'], ['imports.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('alias', 'import_id', name='uix_package_alias_import_id'),
    sa.UniqueConstraint('name', 'import_id', name='uix_package_name_import_id')
    )
    op.create_table('relevant_resources',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('template_id', sa.Integer(), nullable=False),
    sa.Column('resource_type_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['resource_type_id'], ['resource_types.id'], ),
    sa.ForeignKeyConstraint(['template_id'], ['templates.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'template_id', name='uix_relevant_resource_name_template_id')
    )
    op.create_table('resource_type_attributes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('default_value', sa.JSON(), nullable=True),
    sa.Column('enum_values_set', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('resource_type_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['resource_type_id'], ['resource_types.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'resource_type_id', name='uix_resource_type_attribute_name_resource_type_id')
    )
    op.create_table('resources',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('to_be_traced', sa.Boolean(), nullable=False),
    sa.Column('resource_type_id', sa.Integer(), nullable=False),
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ),
    sa.ForeignKeyConstraint(['resource_type_id'], ['resource_types.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'model_id', name='uix_resource_name_model_id')
    )
    op.create_table('rule_bodies',
    sa.Column('condition', sa.Text(), nullable=False),
    sa.Column('body', sa.Text(), nullable=False),
    sa.Column('template_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['template_id'], ['templates.id'], ),
    sa.PrimaryKeyConstraint('template_id')
    )
    op.create_table('template_usages',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('template_id', sa.Integer(), nullable=False),
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ),
    sa.ForeignKeyConstraint(['template_id'], ['templates.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'model_id')
    )
    op.create_table('resource_attributes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('value', sa.JSON(), nullable=False),
    sa.Column('resource_id', sa.Integer(), nullable=False),
    sa.Column('rta_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.id'], ),
    sa.ForeignKeyConstraint(['rta_id'], ['resource_type_attributes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('template_usage_args',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('relevant_resource_id', sa.Integer(), nullable=False),
    sa.Column('template_usage_id', sa.Integer(), nullable=False),
    sa.Column('resource_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['relevant_resource_id'], ['relevant_resources.id'], ),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.id'], ),
    sa.ForeignKeyConstraint(['template_usage_id'], ['template_usages.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('template_usage_args')
    op.drop_table('resource_attributes')
    op.drop_table('template_usages')
    op.drop_table('rule_bodies')
    op.drop_table('resources')
    op.drop_table('resource_type_attributes')
    op.drop_table('relevant_resources')
    op.drop_table('packages')
    op.drop_table('operation_bodies')
    op.drop_table('irregular_event_generators')
    op.drop_table('irregular_event_bodies')
    op.drop_table('function_parameters')
    op.drop_table('edges')
    op.drop_table('templates')
    op.drop_table('resource_types')
    op.drop_table('nodes')
    op.drop_table('imports')
    op.drop_table('functions')
    op.drop_table('models')
    # ### end Alembic commands ###
