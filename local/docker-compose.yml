version: "3.9"

name: at_simulation_api_dependencies
services:
  at_rabbitmq:
    container_name: at_rabbitmq
    image: "rabbitmq:management"
    ports:
      - "${RABBITMQ_UI_PORT}:${RABBITMQ_UI_PORT}"  
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"    
    networks:
      - custom-network
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_LOGIN}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_NODE_PORT: ${RABBITMQ_PORT}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 5s
      timeout: 10s
      retries: 20
    
  at_queue:
    container_name: at_queue
    build:
      dockerfile: ./docker_files/Dockerfile.at_queue
    command: > 
      python -m at_queue
      --host at_rabbitmq
      --port ${RABBITMQ_PORT}
      --login ${RABBITMQ_LOGIN}
      --password ${RABBITMQ_PASSWORD}
      --virtualhost /
    networks:
      - custom-network
    depends_on:
      at_rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ps -p $(cat /var/run/at_queue/pidfile.pid) || exit 1
      interval: 1s
      timeout: 3s
      retries: 30

  at_simulation_db:
    container_name: at_simulation_db
    image: "postgres:alpine"
    expose:
      - "${DB_PORT}"
    ports:
      - "${DB_PORT}:${DB_PORT}"  
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    restart: unless-stopped
    networks:
      - custom-network
    healthcheck:
      test: pg_isready --dbname=${DB_NAME} --username=${DB_USER} --host=localhost --port=${DB_PORT}
      interval: 10s  
      timeout: 5s
      retries: 10 
    volumes:
      - simulation-postgres-data:/var/lib/postgresql/data
    command: ["postgres", "-c", "port=${DB_PORT}"]

  at_minio:
    container_name: at_minio
    image: "minio/minio:latest"
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}" --address ":${MINIO_API_PORT}"
    ports:
      - "${MINIO_API_PORT}:${MINIO_API_PORT}"
      - "${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - minio-data:/data
    restart: unless-stopped
    networks:
      - custom-network

  at_user_api:
    container_name: at_user_api
    build:
      dockerfile: ./docker_files/Dockerfile.at_user_api
    command: python -m at_user_api
      --db_host at_user_db
      --db_port ${AT_USER_DB_PORT}
      --db_name ${AT_USER_DB_NAME}
      --db_user ${AT_USER_DB_USER}
      --db_pass ${AT_USER_DB_PASS}
      --rabbitmq_host at_rabbitmq
      --rabbitmq_port ${RABBITMQ_PORT}
      --rabbitmq_login ${RABBITMQ_LOGIN}
      --rabbitmq_password ${RABBITMQ_PASSWORD}
      --rabbitmq_vhost ${RABBITMQ_VHOST}
      --server_port ${AT_USER_SERVER_PORT}
    environment:
      RABBITMQ_SSL: ${RABBITMQ_SSL}
    expose:
      - "${AT_USER_SERVER_PORT}"
    ports:
      - "${AT_USER_SERVER_PORT}:${AT_USER_SERVER_PORT}"
    depends_on:
      at_queue:
        condition: service_healthy
      at_user_db:
        condition: service_healthy
    networks:
      - custom-network
    
  at_user_db:
    container_name: at_user_db
    image: "postgres:alpine"
    expose:
      - "${AT_USER_DB_PORT}"
    ports:
      - "${AT_USER_DB_PORT}:${AT_USER_DB_PORT}"  
    environment:
      POSTGRES_USER: ${AT_USER_DB_USER}
      POSTGRES_PASSWORD: ${AT_USER_DB_PASS}
      POSTGRES_DB: ${AT_USER_DB_NAME}
    restart: unless-stopped
    networks:
      - custom-network
    healthcheck:
      test: pg_isready --dbname=${AT_USER_DB_NAME} --username=${AT_USER_DB_USER} --host=localhost --port=${AT_USER_DB_PORT}
      interval: 10s  
      timeout: 5s
      retries: 10 
    volumes:
      - user-postgres-data:/var/lib/postgresql/data
    command: ["postgres", "-c", "port=${AT_USER_DB_PORT}"]

networks:
  custom-network:
    external: true

volumes:
  simulation-postgres-data:
  user-postgres-data:
  minio-data:
