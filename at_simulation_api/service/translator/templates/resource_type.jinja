{% for enum in enums %}
type {{ enum.name }} string

const (
    {% for value in enum["values"] %}
    {{ enum_prefix }}_{{ value }} {{ enum.name }} = "{{ value }}"
    {% endfor %}
)
{% endfor %}

type {{ resource_type.name }} struct {
    ResourceName string `json:"resource_name"`
    ToBeTraced bool `json:"-"`
    {% for attribute in resource_type.attributes %}
    {{ attribute.name }} {{ attribute.go_type }}
    {% endfor %}
}

func (r {{ resource_type.name }}) MarshalJSON() ([]byte, error) {
    if !r.ToBeTraced {
        return []byte("null"), nil
    }

    aux := make(map[string]interface{})
    aux["resource_name"] = r.ResourceName
    {% for attribute in resource_type.attributes %}
    aux["{{ attribute.name }}"] = r.{{ attribute.name }}
    {% endfor %}

    return json.Marshal(aux)
}
