type Template_{{ template_name }} struct {
	UsageName string
	HasTriggered bool
	TicksRemaining int

	{% for param in params %}
	{{ param.name }} *{{ param.type }}
	{% endfor %}
}

func (t *Template_{{ template_name }}) Execute() {
	if t.TicksRemaining <= 0 {
		t.TicksRemaining = t.generator_func({{ generator_value }}, {{ generator_dispersion }})
	}

	t.TicksRemaining--

	if t.TicksRemaining == 0 {
		{{ body }}

		t.HasTriggered = true
		return
	}

	t.HasTriggered = false
}

func (t *Template_{{ template_name }}) generator_func(generator_value, generator_dispersion float64) int {
	{% if generator_type == "NORMAL" %}
	min := generator_value - generator_dispersion
	max := generator_value + generator_dispersion
	randomValue := min + rand.Float64()*(max-min)
	return int(math.Max(1, math.Round(randomValue)))

	{% elif generator_type == "PRECISE" %}
	return int(math.Max(1, math.Round(generator_value)))

	{% elif generator_type == "UNIFORM" %}
	min := generator_value - generator_dispersion
	max := generator_value + generator_dispersion
	randomValue := min + rand.Float64()*(max-min)
	return int(math.Max(1, math.Round(randomValue)))

	{% elif generator_type == "EXPONENTIAL" %}
	lambda := 1.0 / generator_value	
	randomValue := rand.ExpFloat64() / lambda
	return int(math.Max(1, math.Round(randomValue)))

	{% elif generator_type == "GAUSSIAN" %}
	randomValue := rand.NormFloat64()*generator_dispersion + generator_value
	return int(math.Max(1, math.Round(randomValue)))

	{% elif generator_type == "POISSON" %}
	lambda := generator_value
	k := 0
	p := 1.0
	l := math.Exp(-lambda)
	for p > l {
		k++
		p *= rand.Float64()
	}
	return k

	{% else %}
	// Default logic (fallback)
	return int(math.Max(1, math.Round(generator_value)))
	{% endif %}
}

func (t *Template_{{ template_name }}) MarshalJSON() ([]byte, error) {
	return json.Marshal(map[string]interface{}{
		"usage_name":    t.UsageName,
		"has_triggered": t.HasTriggered,
		"usage_type": "IRREGULAR_EVENT",
	})
}
